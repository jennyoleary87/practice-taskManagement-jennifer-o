05/15/2025

React State Management and Event Handling | Lesson 4
Practice: Task Management

===== INSTRUCTIONS =====
You will create a React application that:
1. Displays a list of tasks on the main page.
2. Allows users to navigate to a specific task's detail page using URL
parameters.
3. Handles edge cases like invalid or missing task IDs.
This activity reinforces the use of React Router's dynamic routes and the useParams
hook.

 ===== STEPS =====
Step 1: Set Up the Application
Install React Router:
Run the following command to install React Router:
npm install react-router-dom
Create the File Structure:
● App.js: Main component to set up routes.
● src/components/TaskList.jsx: Component displaying a list of tasks.
● src/components/TaskDetail.jsx: Component displaying details of a specific task.
Step 2: Define Task Data
Create a mock task dataset in a separate file or directly within the TaskList
component. Each task object should have id, title and description properties.
Step 3: Create the TaskList Component
● Display a list of tasks with links to their detail pages.
● Include your mock task dataset from step 2 inside of the TaskList
component.
● Use the .map() method to iterate through tasks.
● Make sure to create a Link component that navigates to /task/${task.id}.
Step 4: Create the TaskDetail Component
Retrieve the task ID from the URL and display the corresponding task details.
Step 5: Configure Routes in App.js
Set up the routes to display the task list and task details.
Step 6: Add Styling
To improve user experience, add some basic styling to differentiate the task list and
detail pages.
Deliverables Create a fully functional task viewer where:
● The task list displays clickable links.
● Each link navigates to a detail page for the corresponding task.
● Invalid or missing task IDs are handled gracefully with an error message.
